(function(map) {

	return function() {

		// Check for URL Transfers and perform it first - the esp page on the other side can then handle both Actions and Views using this main lib as well
		if(Array.isArray(map.Transfers)) {

			map.Transfers.forEach(function(Transfer) {

				if(Transfer[0].test(Request.ServerVariables.URL)) {

					if(typeof(Transfer[1]) == "string") {
						Server.Transfer(Transfer[1]);
					}

					if(Array.isArray(Transfer[1])) {
						Server.Transfer(Transfer[1][0], Transfer[1][1]);
					}

					throw new Error("Invalid Transfer Object " + JSON.stringify(Transfer));
				}

			});
		}

		if((typeof(map.Commands) == "object")
			&& map.Commands) {

			// Process any POST actions
			if(/^POST$/i.test(Request.ServerVariables.REQUEST_METHOD)) {

				let CommandValue = Request.Form.cmd;

				if(!CommandValue
					&& Array.isArray(map.CommandFields)) {

					for(let i = 0; i < map.CommandFields.length; i++) {

						CommandValue = Request.Form[map.CommandFields[i]];
						if(CommandValue) {
							break;
						}
					}
				}

				if(CommandValue) {

					const Command = map.Commands[CommandValue];

					if(typeof(Command) == "string") {
						Server.Transfer(Command);
					}

					if(Array.isArray(Command)) {
						Server.Transfer(Command[0], Command[1]);
					}

					if(typeof(Command) == "function") {
						Command();
					}

					else if(typeof(Command) != "undefined") {

						throw new Error("Invalid Command Object " + JSON.stringify(Command) + " " + typeof(Command));
					}
				}

				Response.Status = "303 See Other";
				Response.Headers.Location = (/^on$/i.test(Request.ServerVariables.HTTPS) ? "https://" : "http://") + Request.ServerVariables.HTTP_HOST + Request.ServerVariables.URL;
				Response.End();
			}
		}

		if(map.RequireSSL) {

			if(!/^on$/i.test(Request.ServerVariables.HTTPS)) {

				Response.Status = "303 See Other";
				Response.Headers.Location = "https://" + Request.ServerVariables.HTTP_HOST + Request.ServerVariables.URL;
				Response.End();
			}
		}

		if(Array.isArray(map.Views)) {

			const Views = map.Views;
			const ViewCount = Views.length;

			for(let i = 0; i < ViewCount; i++) {

				let View = Views[i];

				if(View[0].test(Request.ServerVariables.URL)) {

					if(typeof(View[1]) == "string") {
						Server.Transfer(View[1]);
					}

					if(typeof(View[1]) == "function") {

						let Match = Request.ServerVariables.URL.match(View[0]) || [];

						View[1].apply(null, Match.concat(View.slice(2)));
						Response.End();
					}

					throw new Error("Invalid View Object " + JSON.stringify(View));
				}
			}

			if(typeof(Response.NotFound) == "function") {
				Response.NotFound();
				Response.End();
			}

			Response.Status = "404 Resource Not Found";
			Response.Write("<!DOCTYPE><html><head><title>Resource Not Found</title></head><body><h1>Resource Not Found</h1></body></html>");
			Response.End();
		}
	}

});
